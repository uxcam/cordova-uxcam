// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UXCam
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreGraphics
import CoreImage
import Foundation
import Swift
import UIKit
@_exported import UXCam
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(UXTextRectsError) public enum UXTextRectsError : Swift.Int, Swift.Error, Foundation.LocalizedError, Swift.CustomStringConvertible {
  case invalidImage = 1000
  case unsupportedImageSize = 1001
  case unsupportedImageFormat = 1002
  case visionProcessingFailed = 2000
  case detectionRequestFailed = 2001
  case noDetectionResults = 2002
  case preprocessingFailed = 2003
  case coordinateConversionFailed = 2004
  case insufficientMemory = 3000
  case operationTimeout = 3001
  case concurrencyLimitExceeded = 3002
  case resourcesUnavailable = 3003
  case operationCancelled = 4000
  case cancelledMemoryPressure = 4001
  case cancelledAppBackgrounded = 4002
  case invalidConfiguration = 5000
  case featureUnavailable = 5001
  case unsupportedLanguage = 5002
  case systemError = 6000
  case requestError = 6001
  case unknown = 9999
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var description: Swift.String {
    get
  }
  public var isRecoverable: Swift.Bool {
    get
  }
  public var shouldRetry: Swift.Bool {
    get
  }
  public static func withUnderlying(_ baseError: UXCam.UXTextRectsError, underlying: any Swift.Error) -> Foundation.NSError
  public static func underlyingError(from nsError: Foundation.NSError) -> (any Swift.Error)?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class UXTextRectsErrorInfo : ObjectiveC.NSObject {
  @objc public static let domain: Swift.String
  @objc public static func error(code: UXCam.UXTextRectsError, userInfo: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public static func errorWithUnderlying(code: UXCam.UXTextRectsError, underlyingError: Foundation.NSError) -> Foundation.NSError
  @objc public static func underlyingError(from error: Foundation.NSError) -> Foundation.NSError?
  @objc public static func isRecoverable(_ error: Foundation.NSError) -> Swift.Bool
  @objc public static func shouldRetry(_ error: Foundation.NSError) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UXImageHasher) public class ImageHasher : ObjectiveC.NSObject {
  @objc public static func hashForCGImage(_ cgImage: CoreGraphics.CGImage) -> Swift.UInt64
  @objc public static func hashForImage(_ image: UIKit.UIImage) -> Swift.UInt64
  @objc public static func hashForImage(_ image: UIKit.UIImage, seed: Swift.UInt64) -> Swift.UInt64
  @objc public static func hashForCGImage(_ cgImage: CoreGraphics.CGImage, seed: Swift.UInt64) -> Swift.UInt64
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(UXAITextOcclusionRectsProvider) public class UXAITextOcclusionRectsProvider : ObjectiveC.NSObject {
  @objc public var recognitionLanguages: [Swift.String] {
    @objc get
    @objc set
  }
  @objc public init(maxConcurrentOps: Swift.Int = 1)
  @objc override convenience dynamic public init()
  @objc public func rectsForScreenshot(_ screenshot: UIKit.UIImage, completion: @escaping ([Foundation.NSValue]) -> Swift.Void)
  @objc(rectsForScreenshotWithError:completion:) public func rectsForScreenshot(_ screenshot: UIKit.UIImage, completion: @escaping ([Foundation.NSValue]?, Foundation.NSError?) -> Swift.Void)
  @objc public func clearCaches()
  @objc deinit
}
extension UXCam.UXAITextOcclusionRectsProvider {
  @objc dynamic public func cancelOngoingOperations()
}
extension UXCam.UXTextRectsError : Swift.Equatable {}
extension UXCam.UXTextRectsError : Swift.Hashable {}
extension UXCam.UXTextRectsError : Swift.RawRepresentable {}
